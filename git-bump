#!/usr/bin/env bash

set +o errexit
set +o nounset

default_variables() {
  ROOT_DIR=$(git rev-parse --show-toplevel) || exit 1
  VERSION="0.0.1"

  last_version=$(git describe --abbrev=0 --tags)
  next_version=

  field=2

  signed=

  declare -a types
  types=(feat fix perf)
  type_feat="Features"
  type_fix="Bug Fixes"
  type_perf="Performance Improvements"
}

# exit with message to stderr
exit_err() {
  echo "$@" >&2
  exit 1
}

has_cmd() {
  command -v $1 >/dev/null 2>&1
}

# exit if command isn't available
depend() {
  has_cmd $1 || exit_err "Missing dependency: $1"
}

parse_opt() {
  case "$1" in
    h|help)
      echo "help"
      exit
      ;;
    s|sign|signed)
      signed=1
      ;;
    l|last|last-version)
      last_version="$2"
      return 1
      ;;
    n|next|next-version)
      next_version="$2"
      return 1
      ;;
    v|version)
      echo $VERSION
      exit 0
      ;;
    *)
      exit_err "Invalid argument: $1"
  esac
}

parse_opts() {
  while [ -n "$1" ]; do
    case "$1" in
      --*)
        parse_opt ${1:2}
        ;;
      -*)
        local opts=${1:1}
        for (( i = 0; i < ${#opts}; i++ )); do
          parse_opt ${opts:$i:1} "${@:2}"
          shift $?
        done
        ;;
      *)
        exit_err "Invalid argument: $1"
    esac
    shift
  done
}

populate_tags() {
  declare -a tags
  tags=($(git log --tags --simplify-by-decoration --format="%D" | grep -o 'tag: .*' | cut -d',' -f1 | cut -d' ' -f2))
}

compute_next() {
  [ -n "$next_version" ] && return

  local IFS=.
  local -a parts=(${last_version})
  (( parts[field]++ ))
  next_version="${parts[*]}"
}

bump_npm() {
  [[ -f "${ROOT_DIR}/package.json" ]] || return
  has_cmd npm || exit_err "package.json found but missing npm dependency"
  npm version --no-git-tag-version "$next_version"
}

depend cut
depend git
depend grep

default_variables
parse_opts "$@"

populate_tags
compute_next

# bump_npm
# bump_git
